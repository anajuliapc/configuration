# 2017 Instituto de Pesquisas Eldorado <http://www.eldorado.org.br>
# All rights reserved.
#
# Author(s): Ana Julia Pereira Caetano <ana.caetano@eldorado.org.br>
#

import smtplib
import os, sys
import sched, time
import calendar
import argparse
import logging
import csv


class EmailSender():

    def __init__(self):
        # BACKUP
        self.receivers = ['ana.caetano@eldorado.org.br']
        # self.receivers = ['ana.caetano@eldorado.org.br',
        #                   'peter.pennings@eldorado.org.br']

    def email_everyone(self, body):
        user = 'iotshared@gmail.com'
        pwd = 'ipe@2015'
        receivers = ','.join(self.receivers)
        # Prepare actual message
        msg = '\r\n'.join(['From: Centro Cirurgico HC',
                           'To: ' + ','.join(self.receivers),
                           'Subject: [HC] RPi status',
                           '',
                           body]).encode('utf-8')
        try:
            # Gmail parameters
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.ehlo()
            server.starttls()
            server.login(user, pwd)
            # Send e-mail
            server.sendmail(user, self.receivers, msg)
            server.close()
            print('Successfully sent the email.')
        except:
            print('Failed to send email.')
            raise


class Logger():

    def logger(name):
        logger = logging.getLogger('myapp')
        if not len(logger.handlers):
            hdlr = logging.FileHandler('./myapp.log')
            formatter = logging.Formatter('%(asctime)s %(message)s')
            print(formatter)
            hdlr.setFormatter(formatter)
            logger.addHandler(hdlr)
            logger.setLevel(logging.INFO)
        return logger


class VMNotify(EmailSender):

    logger = {}
    log = Logger.logger('Rpi')

    def __init__(self):
        super().__init__()
        self.s = sched.scheduler(time.time, time.sleep)
        # Create log file
        with open('log.csv', 'a') as self.logfile:
            writer = csv.DictWriter(self.logfile,
                    fieldnames = ['Date', 'RPi', 'Status', 'Router'])
            writer.writeheader()


        # IPs of all RPis. It can be changed to get IPs from DB
        # BACKUP
        # self.rpis = {'10.1.240.3': 'UP', '10.1.240.4': 'UP',
        #              '10.1.240.5': 'UP', '10.1.240.6': 'UP',
        #              '10.1.240.7': 'UP', '10.1.240.8': 'UP'}
        self.rpis = {'10.10.27.67': 'DOWN', '10.10.27.7': 'UP'}
        self.email_list = {}
        for ip in self.rpis:
            self.email_list[ip] = self.rpis[ip]
        self.count = 0
        self.check_all_rpis()

    def check_all_rpis(self):
        self.count += 1
        check_email = False
        # Every 15 calls check status to send email
        # BACKUP
        if self.count > 2:
            check_email = True
            self.count = 0
        ip_list = self.rpis
        for ip in ip_list:
            self.check_rpi(ip)
            if check_email:
                self.check_status(ip)
        # Check all Pis every minute
        # BACKUP
        # self.s.enter(60, 1, self.check_all_rpis)
        self.s.enter(10, 1, self.check_all_rpis)
        self.s.run()

    def check_status(self, ip):
        print('Checking status')
        # check if status diverges
        if self.rpis[ip] != self.email_list[ip]:
            # Update status
            self.email_list[ip] = self.rpis[ip]
            # Pi is offline:
            if self.rpis[ip] == 'DOWN':
                print('System down, send email.')
                body = 'Raspberry de ip ' + ip + ' fora do ar.'
            else:
                print('System up, send email.')
                body = 'Raspberry de ip ' + ip + ' funcionando.'
            self.email_everyone(body)
        else:
            print('No changes.')

    def check_rpi(self, rpi_ip):
        print('Check connection')
        response = os.system('ping -c 1 ' + rpi_ip)
        # If the connection fails, ping returns a non-zero value
        if response == 0:
            new_status = 'UP'
            if self.rpis[rpi_ip] != new_status:
                self.rpis[rpi_ip] = 'UP'
                mac_address = os.system('iwlist wlan0 scan | grep Address')
                mac_address = 'blabla'
                # Log that Pi is now UP and in which AP
                self.log.info('Rpi: ' + rpi_ip +
                              ', Status: ' + new_status +
                              ', Access Point: ' + mac_address)
                row = [time.time(), rpi_ip, new_status, mac_address]
                with open('log.csv', 'a') as f:
                    writer = csv.writer(f)
                    writer.writerow(row)
                f.close()
            else:
                print('System up!')
        else:
            new_status = 'DOWN'
            if self.rpis[rpi_ip] != new_status:
                self.rpis[rpi_ip] = 'DOWN'
                # Log that Pi is now down
                self.log.info('Rpi: ' + rpi_ip +
                              ', Status: ' + new_status +
                              ', Access Point: None')
                row = [time.time(), rpi_ip, new_status, 'None']
                with open('log.csv', 'a') as f:
                    writer = csv.writer(f)
                    writer.writerow(row)
                f.close()


class RPiNotify(EmailSender):

    def __init__(self):
        super().__init__()
        self.log_path = '/mnt/hospital/'
        self.s = sched.scheduler(time.time, time.sleep)
        self.check_log()

    def check_log(self):
        log_files = os.listdir(self.log_path)
        # If there is none or more than one file on log folder,
        # it should be investigated
        ip = os.system('hostname -I')
        if len(log_files) != 1:
            msg = "Tem algo errado com os logs da Pi de IP " + str(ip)
            msg = msg + ". Melhor verificar."
            self.email_everyone(msg)
            # Warn again after 24 hours
            self.s.enter(24*60*60, 1, self.check_log)
        # If there is only one, than check if it's up to date
        else:
            fname = log_files[0]
            log_time = os.path.getmtime(self.log_path+fname)
            curr_time = calendar.timegm(time.gmtime())
            delta = curr_time - log_time
            if delta > 300:
            # If nothing was modified in the past 5 minutes,
            # there is something wrong.
                msg = "O arquivo de logs da Pi " + ip
                msg = msg + " esta desatualizado. Verificar."
                self.email_everyone(msg)
            # Check logs every 15 minutes
            self.s.enter(15*60, 1, self.check_log)
        self.s.run()


def main():

    parser = argparse.ArgumentParser(description='Notify if anything fails.')
    parser.add_argument('--VM', default=False,
                        help='VM is true if application is running at the VM')
    args = parser.parse_args()

    if args.VM:
        VMNotify()
    else:
        RPiNotify()


if __name__ == '__main__':
    main()
