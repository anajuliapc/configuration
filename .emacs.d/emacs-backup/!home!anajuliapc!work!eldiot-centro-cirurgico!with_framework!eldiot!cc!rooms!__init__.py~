# eldiot - eldorado's middleware for the internet of things
# © 2015 Instituto de Pesquisas Eldorado <http://www.eldorado.org.br>
# All rights reserved.
#
# Author(s): Ana Julia Pereira Caetano <ana.caetano@eldorado.org.br>
#            João Victor Duarte Martins <joao.martins@eldorado.org.br>
#            Paulo Renato de Faria <paulo.faria@eldorado.org.br>
#


import logging
import argparse

from twisted.internet import defer, reactor

import os
import time
import subprocess
import atexit
import signal
import sys
import numpy as np
import psutil
import collections
#import RPi.GPIO as io

from pkg_resources import resource_stream
from json import dumps
import yaml

import eldiot.framework

from ._version_info import __version__
from .room import Room, PreSurgeryRoom, PostSurgeryRoom, SurgeryRoom
from .scanner import BLEScanner

class BrokerHC(eldiot.framework.BrokerApp):

    log = logging.getLogger(__name__)

    def __init__(self):
        super(BrokerHC, self).__init__('eldiot-broker-hc', __version__)
        with resource_stream(__name__, 'parameters.yaml') as stream:
            self.config = yaml.safe_load(stream)
        self.rooms = self.config['hospital_rooms']

    def add_arguments(self, parser):
        parser.add_argument(
            'rpi',
            help='ID to identify this Raspberry Pi')

    def on_connect(self):
        # Register scanners and rooms
        for room in self.rooms:
            if str(room['mac']) == self.args.rpi:
                room_uri = room['room_uri']
                self.set_room(room)

    @defer.inlineCallbacks
    def set_room(self, room_config):
        room_type = room_config['room_type']
        if room_type == 'pre_surgery':
            room = PreSurgeryRoom(self, room_config)
            room.change_status('PRE_OPERATORIO')
        elif room_type == 'surgery':
            room = SurgeryRoom(self, room_config)
            room.change_status('LIVRE')
        else:
            room = PostSurgeryRoom(self, room_config)
            room.change_status('RPA')
        self.log.info('registering', "Registered room '{}'".format(room.uri))
        yield self.register_object(room)
        # Register scanner:
        yield room.set_scanner(room_config)

        # scanner = BLEScanner(room_config['mac'])
        # yield self.register_object(scanner)
        # scanner_uri = room_config['scanner']
        # self.log.info('registering', "Scanner registered: '{}'"
        #               .format(scanner.uri))
        # room.add_resource('scanner', scanner.uri)
        # scanner.set_threshold(room_config['threshold'])
        # # Register BLE devices to each scanner
        # for device in self.config['ble_monitored_devices']:
        #     scanner.set_device(device['bdaddr'],
        #                        device['tx_power'],
        #                        device['type'],
        #                        device['ble_uri'])
        # scanner.scan()
    #     reactor.callLater(5, self.analyse_consistency, room_config['room_uri'])

        #self.set_scanner(scanner_uri, room, room_config)
        #yield scanner.transition.connect(self.on_transition, room_hc.uri)


    def scan_room(self, room_config, counter=0):
        ''' Deve ser mudada pra apenas verificar consistência de estado'''
        pass
